# Datos de entrada
distancias = {
    'Fabrica1': {'A': 1500, 'B': 1500, 'C': 2000},
    'Fabrica2': {'A': 2000, 'B': 1500, 'C': 1000}
}

stock = {'Fabrica1': 800, 'Fabrica2': 200}
demanda = {'A': 500, 'B': 100, 'C': 400}

# Crear una estructura para almacenar los resultados
resultados = {}

# Función para asignar manualmente la fábrica a cada pozo
for pozo, demanda_pozo in demanda.items():
    mejor_fabrica = None
    menor_costo = float('inf')
    
    print(f"\nPozo {pozo} (demanda: {demanda_pozo} unidades)")
    
    # Evaluar cada fábrica
    for fabrica, stock_fabrica in stock.items():
        # Calcular el costo de enviar desde esta fábrica
        costo = distancias[fabrica][pozo] * demanda_pozo
        
        # Verificar si la fábrica tiene suficiente stock
        if stock_fabrica >= demanda_pozo:
            print(f"- {fabrica} puede abastecer al costo de {costo}. Stock disponible: {stock_fabrica}")
            
            # Preguntar al usuario si quiere asignar esta fábrica
            respuesta = input(f"¿Asignar {fabrica} al pozo {pozo}? (sí/no): ").strip().lower()
            if respuesta == "sí":
                mejor_fabrica = fabrica
                menor_costo = costo
                break  # Salir del bucle si se ha elegido una fábrica

    # Asignar la fábrica al pozo y actualizar el stock si hay una asignación
    if mejor_fabrica:
        resultados[pozo] = {'Fábrica': mejor_fabrica, 'Costo': menor_costo}
        stock[mejor_fabrica] -= demanda_pozo
        print(f"Asignación completada: {mejor_fabrica} abastecerá el pozo {pozo} con costo {menor_costo}")
    else:
        resultados[pozo] = {'Fábrica': None, 'Costo': None}
        print(f"No se asignó ninguna fábrica para el pozo {pozo}")

# Mostrar resultados finales
print("\nResultados:")
for pozo, info in resultados.items():
    if info['Fábrica']:
        print(f"Pozo {pozo}: Asignado a {info['Fábrica']} con costo de envío {info['Costo']}")
    else:
        print(f"Pozo {pozo}: No asignado")

print("\nStock restante en cada fábrica:", stock)
